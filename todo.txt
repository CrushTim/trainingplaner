current:
    test only actual exercise with no planned 
    test add actual exercise per button
          -> with an actual session
          -> with no actual session
    
 TODO:
 update diary doubles even if actual exists
 change onupdate stuff
 change onDelete stuff



frontend:
    make reps and weights editing save in actual exercise 


workout
    excercise
        non expanded: fix button layout 



          List<TrainingSessionBus> allSessions = snapshots.snapshot1.data!;
          List<TrainingExerciseBus> allExercises = snapshots.snapshot2.data!;

          // Clear and rebuild the maps
          plannedToActualSessions.clear();
          plannedToActualExercises.clear();
          unplannedSessions.clear();
          unplannedExercises.clear();

          // Map all sessions (planned and actual)
          for (var session in allSessions) {
            if (session.isPlanned) {
              plannedToActualSessions[session] = null;
            } else {
              unplannedSessions.add(session);
            }
          }

          for (TrainingSessionBus session in unplannedSessions) {
            TrainingSessionBus plannedSession = allSessions.firstWhere(
              (s) => s.trainingSessionId == session.plannedSessionId,
              orElse: () => session,
            );
            if (plannedSession != session) {
              plannedToActualSessions[plannedSession] = session;
              unplannedSessions.remove(session);
            }
          }

          
          // Map all exercises (planned and actual)
          for (var exercise in allExercises) {
            if (exercise.isPlanned) {
              plannedToActualExercises[exercise] = null;
            } else {
              unplannedExercises.add(exercise);
            }
          }

          for (TrainingExerciseBus exercise in unplannedExercises) {
            TrainingExerciseBus plannedExercise = allExercises.firstWhere(
              (e) => e.trainingExerciseID == exercise.plannedExerciseId,
              orElse: () => exercise,
            );
            if (plannedExercise != exercise) {
              plannedToActualExercises[plannedExercise] = exercise;
              unplannedExercises.remove(exercise);
            }
          }

          // Assign exercises to sessions
          for (var session in allSessions) {
            session.trainingSessionExercises = allExercises
                .where((exercise) => session.trainingSessionExcercisesIds
                    .contains(exercise.trainingExerciseID))
                .toList();
          }

          /// set all selected planned and actual sessions and exercises
          if (allSessions.isNotEmpty) {
            if (plannedToActualSessions.keys.isNotEmpty) {
              setSelectedBusinessClass(plannedToActualSessions.keys.first,
                  notify: false);
              selectedActualSession =
                  plannedToActualSessions[getSelectedBusinessClass!];
              isNewActualSession = selectedActualSession == null;
              selectedActualSession ??=
                  getSelectedBusinessClass!.createActualSession();
            }
            return buildTrainingSessionEditFelds(ScaffoldMessenger.of(context));
          } else {
            return const Text("No training sessions available");
          }



























PLANNED AND ACTUAL WORKFLOW

by design, my app works in the way so that if the current selected workout gets actual exercises, there will be a copy generated from the seleted planned 
session and each exercise that gets updated in workout view expanded part, an actual exercise copy is also created. 
These actual and planned exercises and session will be used to compare and display the planned exercises and the actual exercises.
Maybe make a map after resolving the stream in which a planned workout gets mapped to the actual workouts if they exist.
 maybe add a planned workout id attribute to the session bus to make those mappings possible. do the same for exercises.
now when the session gets updated in the button in the workout view, we need to check if a planned exercise and session exist and
if not, create them, otherwise update them

